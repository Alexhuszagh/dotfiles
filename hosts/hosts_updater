#!/usr/bin/env python3
'''
    hosts_updater
    =============

    Automatic hosts updater.
'''

# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <https://unlicense.org>

__version_info__ = ('0','1','0')
__version__ = '.'.join(__version_info__)


import argparse
import re
import requests

parser = argparse.ArgumentParser(description='Update hosts file automatically.')
parser.add_argument(
    '-f', '--file',
    help='''select the file to update''',
    default='/etc/hosts'
)
parser.add_argument(
    '-u', '--url',
    help='''select the remote URL to update from''',
    required=True
)
args = parser.parse_args()

BLACK_START = '''# End of custom host records.
# Start StevenBlack
'''
CUSTOM_RULES = '''# Custom host records are listed here.
'''

def is_stevenblack_hosts(hosts):
    '''Determine if the old file is a StephenBlack/hosts file.'''
    return hosts.startswith('# Title: StevenBlack/hosts')


def read_header(hosts):
    '''Read the header from a StephenBlack/hosts file.'''

    header = ''
    remainder = hosts
    while True:
        line, remainder = remainder.split('\n', 1)
        if line.startswith('#'):
            header += line + '\n'
        else:
            break
    return header


def main():
    '''Entry point'''

    with open(args.file) as file:
        old_hosts = file.read()
    with requests.get(args.url) as response:
        # 1. Don't pick up the phone.
        new_rules = response.text

    # If we have a StephenBlack hosts file, then we need
    # to only replace after:
    #   # End of custom host records.
    #   # Start StevenBlack
    if is_stevenblack_hosts(old_hosts):
        old_start = old_hosts.index(BLACK_START) + len(BLACK_START)
        new_start = new_rules.index(BLACK_START) + len(BLACK_START)
        hosts = old_hosts[:old_start] + new_rules[new_start:]
    else:
        # New file, need to write the header and then update.
        header = read_header(new_rules)
        hosts = header + old_hosts
        hosts += CUSTOM_RULES
        new_start = new_rules.index(BLACK_START) + len(BLACK_START)
        hosts += new_rules[new_start:]

    # Overwrite our hosts file. First save the old hosts file as
    # a back file.
    with open(args.file + '.old', 'w') as file:
        file.write(old_hosts)
    with open(args.file, 'w') as file:
        file.write(hosts)

if __name__ == '__main__':
    main()
